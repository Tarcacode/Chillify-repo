@page "/userdetails/{UserId:int}"

@inject IMemberService MemberService
@inject NavigationManager NavManager

@attribute [Authorize(Policy = "manager+")]

<PageTitle>User Details |Chillify</PageTitle>

<button onclick="@NavigateToUsers" class="btn btn-outline-primary" title="Go back"><img src="images/icons/back.svg" alt="Go back" /></button>
<h1 class="mt-3">User details</h1>
@if (_member is null || string.IsNullOrEmpty(_member.EmailAddress))
{
   <p class="text-danger">User not found.</p>
}
else 
{
    <ul class="list-group">
        <li class="list-group-item">Pseudo: @_member.Pseudo</li>
        <li class="list-group-item">Email: @_member.EmailAddress</li>
        <li class="list-group-item">First name: @(_member.FirstName ?? "No details")</li>
        <li class="list-group-item">Last name: @(_member.LastName ?? "No details")</li>
        <li class="list-group-item">Birth date: @(_member.BirthDate?.ToString() ?? "No details")</li>
        <li class="list-group-item">Role: @_member.RoleId</li>
    </ul>
}

@code {
    [Parameter]
    public int UserId { get; set; }

    private Member _member = new();
    private string? _message;

    protected override async Task OnParametersSetAsync()
    {
        var result = await MemberService.GetMember(UserId);

        if (result.Success == false)
        {
            _message = result.Message;
        }
        else
        {
            _member = result.Data;
        }
    }
    private void NavigateToUsers()
    {
        NavManager.NavigateTo("/users");
    }
}