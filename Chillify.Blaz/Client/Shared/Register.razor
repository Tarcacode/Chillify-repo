@inject IAuthService AuthService

<h2>Register</h2>

<div>
    <EditForm Model="_registerModel" OnValidSubmit="HandleRegistration" class="p-4 p-md-5 border rounded-3 bg-light">
        <DataAnnotationsValidator />

        <label for="EmailAddress">Email address:</label>
        <InputText id="EmailAddress" @bind-Value="_registerModel.EmailAddress" class="form-control" />

        <label for="Pseudo">Pseudo:</label>
        <InputText id="Pseudo" @bind-Value="@_registerModel.Pseudo" class="form-control" />

        <label for="Password">Password:</label>
        <InputText id="Password" type="password" @bind-Value="_registerModel.Password" class="form-control" />

        <label for="ConfirmPassword">Confirm password:</label>
        <InputText id="ConfirmPassword" type="password" @bind-Value="_registerModel.ConfirmPassword" class="form-control" />

        <button type="submit" class="btn btn-success mt-2" title="Sign up">Sign up</button>

        @if (string.IsNullOrEmpty(_message) == false)
        {
            <p class="@(successfulRegistration ? "text-success" : "text-danger")"> @_message</p>
            @if (successfulRegistration)
            {
                <p>You can now click on Log in to access Chillify</p>
            }
        }
        <ValidationSummary />
    </EditForm>
</div>

@code {
    private RegisterModel _registerModel = new();
    private string? _message;
    private bool successfulRegistration = false;

    private async Task HandleRegistration()
    {
        ServiceResponse<int> result = await AuthService.Register(_registerModel);
        _message = result.Message;

        if (result.Success)
        {
            _registerModel = new();
            successfulRegistration = true;
        }
    }
}
