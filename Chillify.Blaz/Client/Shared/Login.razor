@inject IAuthService AuthService
@inject NavigationManager NavManager
@inject AuthStateProvider AuthStateProvider
<h2>Log in</h2>

<div>
    <EditForm Model="_login" OnValidSubmit="HandleLogin" class="p-4 p-md-5 border rounded-3 bg-light">
        <DataAnnotationsValidator />

        <label for="EmailAddress">Email Address:</label>
        <InputText id="EmailAddress" @bind-Value="@_login.EmailAddress" class="form-control" />

        <label for="Password">Password:</label>
        <InputText id="Password" type="password" @bind-Value="@_login.Password" class="form-control" />

        <button type="submit" class="btn btn-success mt-2" title="Login">Log in</button>

        @if (string.IsNullOrEmpty(_message) == false)
        {
            <p class="@(successfulLogin ? "text-success" : "text-danger")">@_message</p>
        }

        <ValidationSummary />
    </EditForm>
</div>

@code {
    private LoginDto _login = new();
    private string? _message;
    private bool successfulLogin = false;

    private async Task HandleLogin()
    {
        ServiceResponse<string> result = await AuthService.Login(_login);
        _message = result.Message;

        if (result.Success)
        {
            successfulLogin = true;
            AuthStateProvider.NotifyAuthenticationStateChanged();
            _login = new();
            NavManager.NavigateTo("/");
        }
    }
}
